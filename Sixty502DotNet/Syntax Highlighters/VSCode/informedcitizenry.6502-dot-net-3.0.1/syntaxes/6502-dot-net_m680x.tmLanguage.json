{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "6502.Net (m680x)",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#multiline-strings"
    },
    {
      "include": "#characters"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#registers"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.pseudoop.6502_net_m680x",
          "match": "(?i)(?<=^|\\:|\\s)(\\.(addr|align|bankbytes|binary|bstring|byte|char|cbmflt|cbmfltp|cstring|dint|dword|fill|hibytes|hiwords|hstring|lint|lobytes|long|lowords|lstring|nstring|pstring|rta|sbyte|short|sint|string|word))\\b"
        },
        {
          "name": "keyword.control.directive.6502_net_m680x",
          "match": "(?i)(?<=^|\\:|\\s)(\\.(assert|bank|binclude|block|break|case|continue|comment|cpu|default|do|dp|dsection|echo|elseifn?const|elseifn?def|else|elseif|encoding|end|endblock|endenum|endfunction|endif|endmacro|endnamespace|endpage|endrepeat|endrelocate|endswitch|endwhile|enum|eor|equ|error|errorif|for|forcepass|foreach|format|function|global|goto|if|ifn?const|ifn?def|import|include|initmem|invoke|label|let|macro|map|namespace|next|org|page|pseudopc|proff|pron|realpc|relocate|repeat|return|section|switch|target|tfradp|tfrbdp|unmap|warn|warnif|while|whiletrue))\\b"
        },
        {
          "name": "keyword.other.mnemonic.6502_net_m680x",
          "match": "(?i)\\b(aba|abx|adca|adcb|adda|addb|addd|anda|andb|andcc|asl|asla|aslb|asr|asra|asrb|bcc|bcs|beq|bge|bgt|bhi|bhs|bita|bitb|ble|blo|bls|blt|bmi|bne|bpl|bra|brn|bsr|bvc|bvs|cba|clc|cli|clr|clra|clrb|clv|cmpa|cmpb|cmpd|cmps|cmpu|cmpx|cmpy|com|coma|comb|cpxa|cwai|daa|dec|deca|decb|des|dex|eora|eorb|exg|inc|inca|incb|ins|inx|jmp|jsr|lbcc|lbcs|lbeq|lbge|lbgt|lbhi|lbhs|lble|lblo|lbls|lblt|lbmi|lbne|lbpl|lbra|lbrn|lbsr|lbvc|lbvs|lda|ldaa|ldab|ldb|ldd|lds|ldu|ldx|ldy|leas|leau|leax|leay|lsl|lsla|lslb|lsr|lsra|lsrb|mul|neg|nega|negb|nop|ora|oraa|orab|orb|orcc|psha|pshb|pshs|pshu|pula|pulb|puls|pulu|rol|rola|rolb|ror|rora|rorb|rti|rts|sba|sbca|sbcb|sec|sei|sev|sex|sta|staa|stab|stb|std|sts|stu|stx|sty|suba|subb|subd|swi|swi2|swi3|sync|tab|tap|tba|tfr|tpa|tst|tsta|tstb|tsx|txs|wai)\\b"
        },
        {
          "name": "keyword.other.macro.6502_net_m680x",
          "match": "(?<=^|\\:|\\s)\\.[a-zA-Z]\\w*\\b"
        },
        {
          "name": "keyword.function.6502_net_m680x",
          "match": "(?i)\\b(abs|acos|atan|byte|cbmflt|cbmfltp|cbrt|ceil|char|cos|cosh|deg|dword|exp|float|floor|format|frac|hypot|int|len|ln|log|log10|long|peek|poke|pow|rad|random|round|section|sgn|sin|sinh|sizeof|sqrt|tan|tanh|typeof|word)\\b"
        },
        {
          "name": "keyword.define",
          "match": "(?i)\\b(CURRENT_PASS|false|MATH_E|MATH_PI|MATH_TAU|INT8_MAX|INT8_MIN|INT16_MAX|INT16_MIN|INT24_MAX|INT24_MIN|INT32_MAX|INT32_MIN|true|UINT8_MAX|UINT8_MIN|UINT16_MAX|UINT16_MIN|UINT24_MAX|UINT24_MIN|UINT32_MAX|UINT32_MIN)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.core6502_net_m680x",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.core6502_net_m680x",
          "match": "\\\\."
        }
      ]
    },
    "multiline-strings": {
      "name": "string.quoted.double.multi-line.6502_net_m680x",
      "begin": "\"\"\"",
      "end": "\"\"\"",
      "patterns": [
        {
          "name": "constant.character.escape.6502_net_m680x",
          "match": "\\\\."
        }
      ]
    },
    "characters": {
      "name": "string.quoted.single.6502_net_m680x",
      "begin": "'",
      "end": "'",
      "patterns": [
        {
          "name": "constant.character.escape.6502_net_m680x",
          "match": "\\\\(['\"\\\\0abfnrtv]|x[0-9a-fA-F]{1,4}|u[0-9a-fA-F]{4})"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.block.6502_net_m680x",
          "begin": "/\\*",
          "end": "\\*/"
        },
        {
          "name": "comment.line.6502_net_m680x",
          "begin": "//",
          "end": "$"
        },
        {
          "name": "comment.line.6502_net_m680x",
          "begin": ";",
          "end": "$"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.numeric.binary.6502_net_m680x",
          "match": "(?i)(((^|[^)a-zA-Z0-9_])\\%)|0b)[0-1_]+(?:\\.[0-1_]+)?(?:[eEpP][\\-\\+]?[0-9_]+)?\\b"
        },
        {
          "name": "constant.numeric.altbinary.6502_net_m680x",
          "match": "(?i)(\\%|0b)[.#_]+\\b"
        },
        {
          "name": "constant.numeric.hexadecimal.6502_net_m680x",
          "match": "(?i)(\\$|0x)[0-9a-fA-F_]+(?:\\.[0-9a-fA-F_]+)?(?:[pP][\\-\\+]?[0-9_]+)?\\b"
        },
        {
          "name": "constant.numeric.octal.6502_net_m680x",
          "match": "(?i)\\b(0[0-7_]+)|((0o)[0-7_]+)(?:\\.[0-7_]+)?(?:[eEpP][\\-\\+]?[0-9_]+)?\\b"
        },
        {
          "name": "constant.numeric.scientific.6502_net_m680x",
          "match": "(?i)\\b[0-9_]+((\\.\\d+)|(?:\\.\\d+)?[eE][\\-\\+]?[0-9_]+)?\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.6502_net_m680x",
          "match": "\\#|\\+|\\-|\\=|\\*|\\:|%|\\\/|\\!|\\<|\\>|\\&|\\||\\^|\\(|\\)|\\[|\\]|\\{|\\}|\\,"
        }
      ]
    },
    "registers": {
      "patterns": [
        {
          "name": "keyword.register.6502_net_m680x",
          "match": "(?i)\\b(a|b|cc|d|dp|pc|s|u|x|y)\\b"
        }
      ]
    }
  },
  "scopeName": "source.core6502_net_m680x"
}