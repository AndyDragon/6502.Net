{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Core 6502.Net (i8080)",
  "patterns": [
    {
      "include": "#keywords"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#characters"
    },
    {
      "include": "#comments"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#registers"
    }
  ],
  "repository": {
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.pseudoop.core6502_net_i8080",
          "match": "(?i)(?<=^|\\:|\\s)(\\.(addr|align|binary|bstring|byte|char|cbmflt|cbmfltp|cstring|dint|dword|fill|hstring|lint|long|lstring|nstring|pstring|rta|sbyte|short|sint|string|word))\\b"
        },
        {
          "name": "keyword.control.directive.core6502_net_i8080",
          "match": "(?i)(?<=^|\\:|\\s)(\\.(assert|bank|binclude|block|break|case|continue|comment|cpu|default|dsection|echo|elseifndef|elseifdef|else|elseif|encoding|end|endblock|endfunction|endif|endmacro|endnamespace|endpage|endrepeat|endrelocate|endswitch|endwhile|eor|equ|error|errorif|for|forcepass|foreach|format|function|global|goto|if|ifdef|ifndef|include|initmem|invoke|let|macro|map|namespace|next|org|page|proff|pron|pseudopc|realpc|relocate|repeat|return|section|switch|target|unmap|warn|warnif|while))\\b"
        },
        {
          "name": "keyword.other.mnemonic.core6502_net_i8080",
          "match": "(?i)\\b(aci|adc|add|adi|ana|and|ani|call|cc|cm|cma|cmc|cmp|cnc|cnz|cp|cpe|cpi|cpo|cz|daa|dad|dcr|dcx|di|ei|hlt|in|inr|inx|jc|jm|jmp|jnc|jnz|jp|jpe|jpo|jz|lda|ldax|lhld|lxi|mov|mvi|nop|ora|ori|out|pchl|pop|push|ral|rar|rc|ret|rlc|rm|rnc|rnz|rp|rpe|rpo|rrc|rst|rz|sbb|sbi|shld|sphl|sta|stax|stc|sub|sui|xchg|xra|xri|xthl)\\b"
        },
        {
          "name": "keyword.other.macro.core6502_net_i8080",
          "match": "(?<=^|\\:|\\s)\\.[a-zA-Z]\\w*\\b"
        },
        {
          "name": "keyword.function.core6502_net_i8080",
          "match": "(?i)\\b(abs|acos|atan|byte|cbmflt|cbmfltp|cbrt|ceil|char|cos|cosh|deg|dword|exp|float|floor|format|frac|hypot|len|ln|log|log10|long|peek|poke|pow|rad|random|round|section|sgn|sin|sinh|sqrt|tan|tanh|word)\\b"
        },
        {
          "name": "keyword.define",
          "match": "(?i)\\b(CURRENT_PASS|false|MATH_E|MATH_PI|INT8_MAX|INT8_MIN|INT16_MAX|INT16_MIN|INT24_MAX|INT24_MIN|INT32_MAX|INT32_MIN|true|UINT8_MAX|UINT8_MIN|UINT16_MAX|UINT16_MIN|UINT24_MAX|UINT24_MIN|UINT32_MAX|UINT32_MIN)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.core6502_net_i8080",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.core6502_net_i8080",
          "match": "\\\\."
        }
      ]
    },
    "characters": {
      "name": "string.quoted.single.core6502_net_i8080",
      "begin": "'",
      "end": "'",
      "patterns": [
        {
          "name": "constant.character.escape.core6502_net_i8080",
          "match": "\\\\(['\"\\\\0abfnrtv]|x[0-9a-fA-F]{1,4}|u[0-9a-fA-F]{4})"
        }
      ]
    },
    "comments": {
      "patterns": [
        {
          "name": "comment.block.core6502_net_i8080",
          "begin": "/\\*",
          "end": "\\*/"
        },
        {
          "name": "comment.line.core6502_net_i8080",
          "begin": "//",
          "end": "$"
        },
        {
          "name": "comment.line.core6502_net_i8080",
          "begin": ";",
          "end": "$"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.numeric.binary.core6502_net_i8080",
          "match": "(?i)(((^|[^)a-zA-Z0-9_])\\%)|0b)[0-1_]+\\b"
        },
        {
          "name": "constant.numeric.altbinary.core6502_net_i8080",
          "match": "(?i)(\\%|0b)[.#_]+\\b"
        },
        {
          "name": "constant.numeric.hexadecimal.core6502_net_i8080",
          "match": "(?i)(\\$|0x)[0-9a-f_]+\\b"
        },
        {
          "name": "constant.numeric.octal.core6502_net_i8080",
          "match": "(?i)\\b(0[0-7_]+)|((0o)[0-7_]+)\\b"
        },
        {
          "name": "constant.numeric.scientific.core6502_net_i8080",
          "match": "(?i)\\b[0-9_]+((\\.\\d+)|(?:\\.\\d+)?e[\\-\\+]?[0-9_]+)?\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.core6502_net_i8080",
          "match": "\\+|\\-|\\=|\\*|\\/|\\!|\\<|\\>|\\&|\\||\\^|\\(|\\)|\\[|\\]|\\,"
        }
      ]
    },
    "registers": {
      "patterns": [
        {
          "name": "keyword.register.core6502_net_i8080",
          "match": "(?i)\\b(a|b|c|d|e|h|l|m|psw)\\b"
        }
      ]
    }
  },
  "scopeName": "source.core6502_net_i8080"
}