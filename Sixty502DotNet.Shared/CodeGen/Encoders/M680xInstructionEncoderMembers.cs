//-----------------------------------------------------------------------------
// Copyright (c) 2017-2023 informedcitizenry <informedcitizenry@gmail.com>
//
// Licensed under the MIT license. See LICENSE for full license information.
// 
//-----------------------------------------------------------------------------

namespace Sixty502DotNet.Shared;

/// <summary>
/// The bit flags for all of the M6809 index operations.
/// </summary>
public static class M6809IndexFlags
{
    public const int Offset5bit = 0b0001_1111,
                     AutoInc1   = 0b1000_0000,
                     AutoInc2   = 0b1000_0001,
                     AutoDec1   = 0b1000_0010,
                     AutoDec2   = 0b1000_0011,
                     ZeroOffset = 0b1000_0100,
                     AccBOffset = 0b1000_0101,
                     AccAOffset = 0b1000_0110,
                     Offset8bit = 0b1000_1000,
                     Offset16   = 0b1000_1001,
                     AccDOffset = 0b1000_1011,
                     PC8BitOffs = 0b1000_1100,
                     PC16Bit    = 0b1000_1101,
                     OffsetMask = 0b1000_1111,
                     Indirect   = 0b1001_0000,
                     Extended   = 0b1001_1111,
                     X          = 0b0000_0000,
                     Y          = 0b0010_0000,
                     U          = 0b0100_0000,
                     S          = 0b0110_0000,
                     IndexMask  = 0b0110_0000;
};

public sealed partial class M680xInstructionEncoder
{
    private static readonly Dictionary<int, Instruction> s_m6800Absolute = new()
    {
        { SyntaxParser.NEG, new Instruction("neg ${0:x4}", 0x70, 3) },
        { SyntaxParser.COM, new Instruction("com ${0:x4}", 0x73, 3) },
        { SyntaxParser.LSR, new Instruction("lsr ${0:x4}", 0x74, 3) },
        { SyntaxParser.ROR, new Instruction("ror ${0:x4}", 0x76, 3) },
        { SyntaxParser.ASR, new Instruction("asr ${0:x4}", 0x77, 3) },
        { SyntaxParser.ASL, new Instruction("asl ${0:x4}", 0x78, 3) },
        { SyntaxParser.ROL, new Instruction("rol ${0:x4}", 0x79, 3) },
        { SyntaxParser.DEC, new Instruction("dec ${0:x4}", 0x7a, 3) },
        { SyntaxParser.INC, new Instruction("inc ${0:x4}", 0x7c, 3) },
        { SyntaxParser.TST, new Instruction("tst ${0:x4}", 0x7d, 3) },
        { SyntaxParser.JMP, new Instruction("jmp ${0:x4}", 0x7e, 3) },
        { SyntaxParser.CLR, new Instruction("clr ${0:x4}", 0x7f, 3) },
        { SyntaxParser.SUBA, new Instruction("suba ${0:x4}", 0xb0, 3) },
        { SyntaxParser.CMPA, new Instruction("cmpa ${0:x4}", 0xb1, 3) },
        { SyntaxParser.SBCA, new Instruction("sbca ${0:x4}", 0xb2, 3) },
        { SyntaxParser.ANDA, new Instruction("anda ${0:x4}", 0xb4, 3) },
        { SyntaxParser.BITA, new Instruction("bita ${0:x4}", 0xb5, 3) },
        { SyntaxParser.LDAA, new Instruction("ldaa ${0:x4}", 0xb6, 3) },
        { SyntaxParser.STAA, new Instruction("staa ${0:x4}", 0xb7, 3) },
        { SyntaxParser.EORA, new Instruction("eora ${0:x4}", 0xb8, 3) },
        { SyntaxParser.ADCA, new Instruction("adca ${0:x4}", 0xb9, 3) },
        { SyntaxParser.ORAA, new Instruction("oraa ${0:x4}", 0xba, 3) },
        { SyntaxParser.ADDA, new Instruction("adda ${0:x4}", 0xbb, 3) },
        { SyntaxParser.CPXA, new Instruction("cpxa ${0:x4}", 0xbc, 3) },
        { SyntaxParser.JSR, new Instruction("jsr ${0:x4}", 0xbd, 3) },
        { SyntaxParser.LDS, new Instruction("lds ${0:x4}", 0xbe, 3) },
        { SyntaxParser.STS, new Instruction("sts ${0:x4}", 0xbf, 3) },
        { SyntaxParser.SUBB, new Instruction("subb ${0:x4}", 0xf0, 3) },
        { SyntaxParser.CMPB, new Instruction("cmpb ${0:x4}", 0xf1, 3) },
        { SyntaxParser.SBCB, new Instruction("sbcb ${0:x4}", 0xf2, 3) },
        { SyntaxParser.ANDB, new Instruction("andb ${0:x4}", 0xf4, 3) },
        { SyntaxParser.BITB, new Instruction("bitb ${0:x4}", 0xf5, 3) },
        { SyntaxParser.LDAB, new Instruction("ldab ${0:x4}", 0xf6, 3) },
        { SyntaxParser.STAB, new Instruction("stab ${0:x4}", 0xf7, 3) },
        { SyntaxParser.EORB, new Instruction("eorb ${0:x4}", 0xf8, 3) },
        { SyntaxParser.ADCB, new Instruction("adcb ${0:x4}", 0xf9, 3) },
        { SyntaxParser.ORAB, new Instruction("orab ${0:x4}", 0xfa, 3) },
        { SyntaxParser.ADDB, new Instruction("addb ${0:x4}", 0xfb, 3) },
        { SyntaxParser.LDX, new Instruction("ldx ${0:x4}", 0xfe, 3) },
        { SyntaxParser.STX, new Instruction("stx ${0:x4}", 0xff, 3) },
        /* relatives */
        { SyntaxParser.BRA, new Instruction("bra ${0:x4}", 0x20, 2, true) },
        { SyntaxParser.BHI, new Instruction("bhi ${0:x4}", 0x22, 2, true) },
        { SyntaxParser.BLS, new Instruction("bls ${0:x4}", 0x23, 2, true) },
        { SyntaxParser.BCC, new Instruction("bcc ${0:x4}", 0x24, 2, true) },
        { SyntaxParser.BCS, new Instruction("bcs ${0:x4}", 0x25, 2, true) },
        { SyntaxParser.BNE, new Instruction("bne ${0:x4}", 0x26, 2, true) },
        { SyntaxParser.BEQ, new Instruction("beq ${0:x4}", 0x27, 2, true) },
        { SyntaxParser.BVC, new Instruction("bvc ${0:x4}", 0x28, 2, true) },
        { SyntaxParser.BVS, new Instruction("bvs ${0:x4}", 0x29, 2, true) },
        { SyntaxParser.BPL, new Instruction("bpl ${0:x4}", 0x2a, 2, true) },
        { SyntaxParser.BMI, new Instruction("bmi ${0:x4}", 0x2b, 2, true) },
        { SyntaxParser.BGE, new Instruction("bge ${0:x4}", 0x2c, 2, true) },
        { SyntaxParser.BLT, new Instruction("blt ${0:x4}", 0x2d, 2, true) },
        { SyntaxParser.BGT, new Instruction("bgt ${0:x4}", 0x2e, 2, true) },
        { SyntaxParser.BLE, new Instruction("ble ${0:x4}", 0x2f, 2, true) },
        { SyntaxParser.BSR, new Instruction("bsr ${0:x4}", 0x8d, 2, true) },
    };

    private static readonly Dictionary<int, Instruction> s_m6800ImmAbs = new()
    {
        { SyntaxParser.LDS, new Instruction("lds #${0:x4}", 0x8e, 3) },
        { SyntaxParser.LDX, new Instruction("ldx #${0:x4}", 0xce, 3) },
    };

    private static readonly Dictionary<int, Instruction> s_m6800Immediate = new()
    {
        { SyntaxParser.SUBA, new Instruction("suba #${0:x2}", 0x80, 2) },
        { SyntaxParser.CMPA, new Instruction("cmpa #${0:x2}", 0x81, 2) },
        { SyntaxParser.SBCA, new Instruction("sbca #${0:x2}", 0x82, 2) },
        { SyntaxParser.ANDA, new Instruction("anda #${0:x2}", 0x84, 2) },
        { SyntaxParser.BITA, new Instruction("bita #${0:x2}", 0x85, 2) },
        { SyntaxParser.LDAA, new Instruction("ldaa #${0:x2}", 0x86, 2) },
        { SyntaxParser.EORA, new Instruction("eora #${0:x2}", 0x88, 2) },
        { SyntaxParser.ADCA, new Instruction("adca #${0:x2}", 0x89, 2) },
        { SyntaxParser.ORAA, new Instruction("oraa #${0:x2}", 0x8a, 2) },
        { SyntaxParser.ADDA, new Instruction("adda #${0:x2}", 0x8b, 2) },
        { SyntaxParser.CPXA, new Instruction("cpxa #${0:x2}", 0x8c, 2) },
        { SyntaxParser.SUBB, new Instruction("subb #${0:x2}", 0xc0, 2) },
        { SyntaxParser.CMPB, new Instruction("cmpb #${0:x2}", 0xc1, 2) },
        { SyntaxParser.SBCB, new Instruction("sbcb #${0:x2}", 0xc2, 2) },
        { SyntaxParser.ANDB, new Instruction("andb #${0:x2}", 0xc4, 2) },
        { SyntaxParser.BITB, new Instruction("bitb #${0:x2}", 0xc5, 2) },
        { SyntaxParser.LDAB, new Instruction("ldab #${0:x2}", 0xc6, 2) },
        { SyntaxParser.STAA, new Instruction("staa #${0:x2}", 0xc7, 2) },
        { SyntaxParser.EORB, new Instruction("eorb #${0:x2}", 0xc8, 2) },
        { SyntaxParser.ADCB, new Instruction("adcb #${0:x2}", 0xc9, 2) },
        { SyntaxParser.ORAB, new Instruction("orab #${0:x2}", 0xca, 2) },
        { SyntaxParser.ADDB, new Instruction("addb #${0:x2}", 0xcb, 2) },
    };

    private static readonly Dictionary<int, Instruction> s_m6800Implied = new()
    {
        { SyntaxParser.NOP, new Instruction("nop", 0x01) },
        { SyntaxParser.TAP, new Instruction("tap", 0x06) },
        { SyntaxParser.TPA, new Instruction("tpa", 0x07) },
        { SyntaxParser.INX, new Instruction("inx", 0x08) },
        { SyntaxParser.DEX, new Instruction("dex", 0x09) },
        { SyntaxParser.CLV, new Instruction("clv", 0x0a) },
        { SyntaxParser.SEV, new Instruction("sev", 0x0b) },
        { SyntaxParser.CLC, new Instruction("clc", 0x0c) },
        { SyntaxParser.SEC, new Instruction("sec", 0x0d) },
        { SyntaxParser.CLI, new Instruction("cli", 0x0e) },
        { SyntaxParser.SEI, new Instruction("sei", 0x0f) },
        { SyntaxParser.SBA, new Instruction("sba", 0x10) },
        { SyntaxParser.CBA, new Instruction("cba", 0x11) },
        { SyntaxParser.TAB, new Instruction("tab", 0x16) },
        { SyntaxParser.TBA, new Instruction("tba", 0x17) },
        { SyntaxParser.DAA, new Instruction("daa", 0x19) },
        { SyntaxParser.ABA, new Instruction("aba", 0x1b) },
        { SyntaxParser.TSX, new Instruction("tsx", 0x30) },
        { SyntaxParser.INS, new Instruction("ins", 0x31) },
        { SyntaxParser.PULA, new Instruction("pula", 0x32) },
        { SyntaxParser.PULB, new Instruction("pulb", 0x33) },
        { SyntaxParser.DES, new Instruction("des", 0x34) },
        { SyntaxParser.TXS, new Instruction("txs", 0x35) },
        { SyntaxParser.PSHA, new Instruction("psha", 0x36) },
        { SyntaxParser.PSHB, new Instruction("pshb", 0x37) },
        { SyntaxParser.RTS, new Instruction("rts", 0x39) },
        { SyntaxParser.RTI, new Instruction("rti", 0x3b) },
        { SyntaxParser.WAI, new Instruction("wai", 0x3e) },
        { SyntaxParser.SWI, new Instruction("swi", 0x3f) },
        { SyntaxParser.NEGA, new Instruction("nega", 0x40) },
        { SyntaxParser.COMA, new Instruction("coma", 0x43) },
        { SyntaxParser.LSRA, new Instruction("lsra", 0x44) },
        { SyntaxParser.RORA, new Instruction("rora", 0x46) },
        { SyntaxParser.ASRA, new Instruction("asra", 0x47) },
        { SyntaxParser.ASLA, new Instruction("asla", 0x48) },
        { SyntaxParser.ROLA, new Instruction("rola", 0x49) },
        { SyntaxParser.DECA, new Instruction("deca", 0x4a) },
        { SyntaxParser.INCA, new Instruction("inca", 0x4c) },
        { SyntaxParser.TSTA, new Instruction("tsta", 0x4d) },
        { SyntaxParser.CLRA, new Instruction("clra", 0x4f) },
        { SyntaxParser.NEGB, new Instruction("negb", 0x50) },
        { SyntaxParser.COMB, new Instruction("comb", 0x53) },
        { SyntaxParser.LSRB, new Instruction("lsrb", 0x54) },
        { SyntaxParser.RORB, new Instruction("rorb", 0x56) },
        { SyntaxParser.ASRB, new Instruction("asrb", 0x57) },
        { SyntaxParser.ASLB, new Instruction("aslb", 0x58) },
        { SyntaxParser.ROLB, new Instruction("rolb", 0x59) },
        { SyntaxParser.DECB, new Instruction("decb", 0x5a) },
        { SyntaxParser.INCB, new Instruction("incb", 0x5c) },
        { SyntaxParser.TSTB, new Instruction("tstb", 0x5d) },
        { SyntaxParser.CLRB, new Instruction("clrb", 0x5f) },
    };

    private static readonly Dictionary<int, Instruction> s_m6800ZeroPage = new()
    {
        { SyntaxParser.SUBA, new Instruction("suba ${0:x2}", 0x90, 2) },
        { SyntaxParser.CMPA, new Instruction("cmpa ${0:x2}", 0x91, 2) },
        { SyntaxParser.SBCA, new Instruction("sbca ${0:x2}", 0x92, 2) },
        { SyntaxParser.ANDA, new Instruction("anda ${0:x2}", 0x94, 2) },
        { SyntaxParser.BITA, new Instruction("bita ${0:x2}", 0x95, 2) },
        { SyntaxParser.LDAA, new Instruction("ldaa ${0:x2}", 0x96, 2) },
        { SyntaxParser.STAA, new Instruction("staa ${0:x2}", 0x97, 2) },
        { SyntaxParser.EORA, new Instruction("eora ${0:x2}", 0x98, 2) },
        { SyntaxParser.ADCA, new Instruction("adca ${0:x2}", 0x99, 2) },
        { SyntaxParser.ORAA, new Instruction("oraa ${0:x2}", 0x9a, 2) },
        { SyntaxParser.ADDA, new Instruction("adda ${0:x2}", 0x9b, 2) },
        { SyntaxParser.CPXA, new Instruction("cpxa ${0:x2}", 0x9c, 2) },
        { SyntaxParser.LDS, new Instruction("lds ${0:x2}", 0x9e, 2) },
        { SyntaxParser.STS, new Instruction("sts ${0:x2}", 0x9f, 2) },
        { SyntaxParser.SUBB, new Instruction("subb ${0:x2}", 0xd0, 2) },
        { SyntaxParser.CMPB, new Instruction("cmpb ${0:x2}", 0xd1, 2) },
        { SyntaxParser.SBCB, new Instruction("sbcb ${0:x2}", 0xd2, 2) },
        { SyntaxParser.ANDB, new Instruction("andb ${0:x2}", 0xd4, 2) },
        { SyntaxParser.BITB, new Instruction("bitb ${0:x2}", 0xd5, 2) },
        { SyntaxParser.LDAB, new Instruction("ldab ${0:x2}", 0xd6, 2) },
        { SyntaxParser.STAB, new Instruction("stab ${0:x2}", 0xd7, 2) },
        { SyntaxParser.EORB, new Instruction("eorb ${0:x2}", 0xd8, 2) },
        { SyntaxParser.ADCB, new Instruction("adcb ${0:x2}", 0xd9, 2) },
        { SyntaxParser.ORAB, new Instruction("orab ${0:x2}", 0xda, 2) },
        { SyntaxParser.ADDB, new Instruction("addb ${0:x2}", 0xdb, 2) },
        { SyntaxParser.LDX, new Instruction("ldx ${0:x2}", 0xde, 2) },
        { SyntaxParser.STX, new Instruction("stx ${0:x2}", 0xdf, 2) },
    };

    private static readonly Dictionary<int, Instruction> s_m6800ZeroPageX = new()
    {
        { SyntaxParser.NEG, new Instruction("neg ${0:x2},x", 0x60, 2) },
        { SyntaxParser.COM, new Instruction("com ${0:x2},x", 0x63, 2) },
        { SyntaxParser.LSR, new Instruction("lsr ${0:x2},x", 0x64, 2) },
        { SyntaxParser.ROR, new Instruction("ror ${0:x2},x", 0x66, 2) },
        { SyntaxParser.ASR, new Instruction("asr ${0:x2},x", 0x67, 2) },
        { SyntaxParser.ASL, new Instruction("asl ${0:x2},x", 0x68, 2) },
        { SyntaxParser.ROL, new Instruction("rol ${0:x2},x", 0x69, 2) },
        { SyntaxParser.DEC, new Instruction("dec ${0:x2},x", 0x6a, 2) },
        { SyntaxParser.INC, new Instruction("inc ${0:x2},x", 0x6c, 2) },
        { SyntaxParser.TST, new Instruction("tst ${0:x2},x", 0x6d, 2) },
        { SyntaxParser.JMP, new Instruction("jmp ${0:x2},x", 0x6e, 2) },
        { SyntaxParser.CLR, new Instruction("clr ${0:x2},x", 0x6f, 2) },
        { SyntaxParser.SUBA, new Instruction("suba ${0:x2},x", 0xa0, 2) },
        { SyntaxParser.CMPA, new Instruction("cmpa ${0:x2},x", 0xa1, 2) },
        { SyntaxParser.SBCA, new Instruction("sbca ${0:x2},x", 0xa2, 2) },
        { SyntaxParser.ANDA, new Instruction("anda ${0:x2},x", 0xa4, 2) },
        { SyntaxParser.BITA, new Instruction("bita ${0:x2},x", 0xa5, 2) },
        { SyntaxParser.LDAA, new Instruction("ldaa ${0:x2},x", 0xa6, 2) },
        { SyntaxParser.STAA, new Instruction("staa ${0:x2},x", 0xa7, 2) },
        { SyntaxParser.EORA, new Instruction("eora ${0:x2},x", 0xa8, 2) },
        { SyntaxParser.ADCA, new Instruction("adca ${0:x2},x", 0xa9, 2) },
        { SyntaxParser.ORAA, new Instruction("oraa ${0:x2},x", 0xaa, 2) },
        { SyntaxParser.ADDA, new Instruction("adda ${0:x2},x", 0xab, 2) },
        { SyntaxParser.CPXA, new Instruction("cpxa ${0:x2},x", 0xac, 2) },
        { SyntaxParser.JSR, new Instruction("jsr ${0:x2},x", 0xad, 2) },
        { SyntaxParser.LDS, new Instruction("lds ${0:x2},x", 0xae, 2) },
        { SyntaxParser.STS, new Instruction("sts ${0:x2},x", 0xaf, 2) },
        { SyntaxParser.SUBB, new Instruction("subb ${0:x2},x", 0xe0, 2) },
        { SyntaxParser.CMPB, new Instruction("cmpb ${0:x2},x", 0xe1, 2) },
        { SyntaxParser.SBCB, new Instruction("sbcb ${0:x2},x", 0xe2, 2) },
        { SyntaxParser.ANDB, new Instruction("andb ${0:x2},x", 0xe4, 2) },
        { SyntaxParser.BITB, new Instruction("bitb ${0:x2},x", 0xe5, 2) },
        { SyntaxParser.LDAB, new Instruction("ldab ${0:x2},x", 0xe6, 2) },
        { SyntaxParser.STAB, new Instruction("stab ${0:x2},x", 0xe7, 2) },
        { SyntaxParser.EORB, new Instruction("eorb ${0:x2},x", 0xe8, 2) },
        { SyntaxParser.ADCB, new Instruction("adcb ${0:x2},x", 0xe9, 2) },
        { SyntaxParser.ORAB, new Instruction("orab ${0:x2},x", 0xea, 2) },
        { SyntaxParser.ADDB, new Instruction("addb ${0:x2},x", 0xeb, 2) },
        { SyntaxParser.LDX, new Instruction("ldx ${0:x2},x", 0xee, 2) },
        { SyntaxParser.STX, new Instruction("stx ${0:x2},x", 0xef, 2) },
    };

    private readonly static Dictionary<int, Instruction> s_m6800AllOpcodes = new()
    {
        { 0x01, new Instruction("nop", 0x01) },
        { 0x06, new Instruction("tap", 0x06) },
        { 0x07, new Instruction("tpa", 0x07) },
        { 0x08, new Instruction("inx", 0x08) },
        { 0x09, new Instruction("dex", 0x09) },
        { 0x0a, new Instruction("clv", 0x0a) },
        { 0x0b, new Instruction("sev", 0x0b) },
        { 0x0c, new Instruction("clc", 0x0c) },
        { 0x0d, new Instruction("sec", 0x0d) },
        { 0x0e, new Instruction("cli", 0x0e) },
        { 0x0f, new Instruction("sei", 0x0f) },
        { 0x10, new Instruction("sba", 0x10) },
        { 0x11, new Instruction("cba", 0x11) },
        { 0x16, new Instruction("tab", 0x16) },
        { 0x17, new Instruction("tba", 0x17) },
        { 0x19, new Instruction("daa", 0x19) },
        { 0x1b, new Instruction("aba", 0x1b) },
        { 0x20, new Instruction("bra ${0:x4}", 0x20, 2) },
        { 0x22, new Instruction("bhi ${0:x4}", 0x22, 2) },
        { 0x23, new Instruction("bls ${0:x4}", 0x23, 2) },
        { 0x24, new Instruction("bcc ${0:x4}", 0x24, 2) },
        { 0x25, new Instruction("bcs ${0:x4}", 0x25, 2) },
        { 0x26, new Instruction("bne ${0:x4}", 0x26, 2) },
        { 0x27, new Instruction("beq ${0:x4}", 0x27, 2) },
        { 0x28, new Instruction("bvc ${0:x4}", 0x28, 2) },
        { 0x29, new Instruction("bvs ${0:x4}", 0x29, 2) },
        { 0x2a, new Instruction("bpl ${0:x4}", 0x2a, 2) },
        { 0x2b, new Instruction("bmi ${0:x4}", 0x2b, 2) },
        { 0x2c, new Instruction("bge ${0:x4}", 0x2c, 2) },
        { 0x2d, new Instruction("blt ${0:x4}", 0x2d, 2) },
        { 0x2e, new Instruction("bgt ${0:x4}", 0x2e, 2) },
        { 0x2f, new Instruction("ble ${0:x4}", 0x2f, 2) },
        { 0x30, new Instruction("tsx", 0x30) },
        { 0x31, new Instruction("ins", 0x31) },
        { 0x32, new Instruction("pula", 0x32) },
        { 0x33, new Instruction("pulb", 0x33) },
        { 0x34, new Instruction("des", 0x34) },
        { 0x35, new Instruction("txs", 0x35) },
        { 0x36, new Instruction("psha", 0x36) },
        { 0x37, new Instruction("pshb", 0x37) },
        { 0x39, new Instruction("rts", 0x39) },
        { 0x3b, new Instruction("rti", 0x3b) },
        { 0x3e, new Instruction("wai", 0x3e) },
        { 0x3f, new Instruction("swi", 0x3f) },
        { 0x40, new Instruction("nega", 0x40) },
        { 0x43, new Instruction("coma", 0x43) },
        { 0x44, new Instruction("lsra", 0x44) },
        { 0x46, new Instruction("rora", 0x46) },
        { 0x47, new Instruction("asra", 0x47) },
        { 0x48, new Instruction("asla", 0x48) },
        { 0x49, new Instruction("rola", 0x49) },
        { 0x4a, new Instruction("deca", 0x4a) },
        { 0x4c, new Instruction("inca", 0x4c) },
        { 0x4d, new Instruction("tsta", 0x4d) },
        { 0x4f, new Instruction("clra", 0x4f) },
        { 0x50, new Instruction("negb", 0x50) },
        { 0x53, new Instruction("comb", 0x53) },
        { 0x54, new Instruction("lsrb", 0x54) },
        { 0x56, new Instruction("rorb", 0x56) },
        { 0x57, new Instruction("asrb", 0x57) },
        { 0x58, new Instruction("aslb", 0x58) },
        { 0x59, new Instruction("rolb", 0x59) },
        { 0x5a, new Instruction("decb", 0x5a) },
        { 0x5c, new Instruction("incb", 0x5c) },
        { 0x5d, new Instruction("tstb", 0x5d) },
        { 0x5f, new Instruction("clrb", 0x5f) },
        { 0x60, new Instruction("neg ${0:x2},x", 0x60, 2) },
        { 0x63, new Instruction("com ${0:x2},x", 0x63, 2) },
        { 0x64, new Instruction("lsr ${0:x2},x", 0x64, 2) },
        { 0x66, new Instruction("ror ${0:x2},x", 0x66, 2) },
        { 0x67, new Instruction("asr ${0:x2},x", 0x67, 2) },
        { 0x68, new Instruction("asl ${0:x2},x", 0x68, 2) },
        { 0x69, new Instruction("rol ${0:x2},x", 0x69, 2) },
        { 0x6a, new Instruction("dec ${0:x2},x", 0x6a, 2) },
        { 0x6c, new Instruction("inc ${0:x2},x", 0x6c, 2) },
        { 0x6d, new Instruction("tst ${0:x2},x", 0x6d, 2) },
        { 0x6e, new Instruction("jmp ${0:x2},x", 0x6e, 2) },
        { 0x6f, new Instruction("clr ${0:x2},x", 0x6f, 2) },
        { 0x70, new Instruction("neg ${0:x4}", 0x70, 3) },
        { 0x73, new Instruction("com ${0:x4}", 0x73, 3) },
        { 0x74, new Instruction("lsr ${0:x4}", 0x74, 3) },
        { 0x76, new Instruction("ror ${0:x4}", 0x76, 3) },
        { 0x77, new Instruction("asr ${0:x4}", 0x77, 3) },
        { 0x78, new Instruction("asl ${0:x4}", 0x78, 3) },
        { 0x79, new Instruction("rol ${0:x4}", 0x79, 3) },
        { 0x7a, new Instruction("dec ${0:x4}", 0x7a, 3) },
        { 0x7c, new Instruction("inc ${0:x4}", 0x7c, 3) },
        { 0x7d, new Instruction("tst ${0:x4}", 0x7d, 3) },
        { 0x7e, new Instruction("jmp ${0:x4}", 0x7e, 3) },
        { 0x7f, new Instruction("clr ${0:x4}", 0x7f, 3) },
        { 0x80, new Instruction("suba #${0:x2}", 0x80, 2) },
        { 0x81, new Instruction("cmpa #${0:x2}", 0x81, 2) },
        { 0x82, new Instruction("sbca #${0:x2}", 0x82, 2) },
        { 0x84, new Instruction("anda #${0:x2}", 0x84, 2) },
        { 0x85, new Instruction("bita #${0:x2}", 0x85, 2) },
        { 0x86, new Instruction("ldaa #${0:x2}", 0x86, 2) },
        { 0x88, new Instruction("eora #${0:x2}", 0x88, 2) },
        { 0x89, new Instruction("adca #${0:x2}", 0x89, 2) },
        { 0x8a, new Instruction("oraa #${0:x2}", 0x8a, 2) },
        { 0x8b, new Instruction("adda #${0:x2}", 0x8b, 2) },
        { 0x8c, new Instruction("cpxa #${0:x2}", 0x8c, 2) },
        { 0x8d, new Instruction("bsr ${0:x4}", 0x8d, 2) },
        { 0x8e, new Instruction("lds #${0:x4}", 0x8e, 3) },
        { 0x90, new Instruction("suba ${0:x2}", 0x90, 2) },
        { 0x91, new Instruction("cmpa ${0:x2}", 0x91, 2) },
        { 0x92, new Instruction("sbca ${0:x2}", 0x92, 2) },
        { 0x94, new Instruction("anda ${0:x2}", 0x94, 2) },
        { 0x95, new Instruction("bita ${0:x2}", 0x95, 2) },
        { 0x96, new Instruction("ldaa ${0:x2}", 0x96, 2) },
        { 0x97, new Instruction("staa ${0:x2}", 0x97, 2) },
        { 0x98, new Instruction("eora ${0:x2}", 0x98, 2) },
        { 0x99, new Instruction("adca ${0:x2}", 0x99, 2) },
        { 0x9a, new Instruction("oraa ${0:x2}", 0x9a, 2) },
        { 0x9b, new Instruction("adda ${0:x2}", 0x9b, 2) },
        { 0x9c, new Instruction("cpxa ${0:x2}", 0x9c, 2) },
        { 0x9e, new Instruction("lds ${0:x2}", 0x9e, 2) },
        { 0x9f, new Instruction("sts ${0:x2}", 0x9f, 2) },
        { 0xa0, new Instruction("suba ${0:x2},x", 0xa0, 2) },
        { 0xa1, new Instruction("cmpa ${0:x2},x", 0xa1, 2) },
        { 0xa2, new Instruction("sbca ${0:x2},x", 0xa2, 2) },
        { 0xa4, new Instruction("anda ${0:x2},x", 0xa4, 2) },
        { 0xa5, new Instruction("bita ${0:x2},x", 0xa5, 2) },
        { 0xa6, new Instruction("ldaa ${0:x2},x", 0xa6, 2) },
        { 0xa7, new Instruction("staa ${0:x2},x", 0xa7, 2) },
        { 0xa8, new Instruction("eora ${0:x2},x", 0xa8, 2) },
        { 0xa9, new Instruction("adca ${0:x2},x", 0xa9, 2) },
        { 0xaa, new Instruction("oraa ${0:x2},x", 0xaa, 2) },
        { 0xab, new Instruction("adda ${0:x2},x", 0xab, 2) },
        { 0xac, new Instruction("cpxa ${0:x2},x", 0xac, 2) },
        { 0xad, new Instruction("jsr ${0:x2},x", 0xad, 2) },
        { 0xae, new Instruction("lds ${0:x2},x", 0xae, 2) },
        { 0xaf, new Instruction("sts ${0:x2},x", 0xaf, 2) },
        { 0xb0, new Instruction("suba ${0:x4}", 0xb0, 3) },
        { 0xb1, new Instruction("cmpa ${0:x4}", 0xb1, 3) },
        { 0xb2, new Instruction("sbca ${0:x4}", 0xb2, 3) },
        { 0xb4, new Instruction("anda ${0:x4}", 0xb4, 3) },
        { 0xb5, new Instruction("bita ${0:x4}", 0xb5, 3) },
        { 0xb6, new Instruction("ldaa ${0:x4}", 0xb6, 3) },
        { 0xb7, new Instruction("staa ${0:x4}", 0xb7, 3) },
        { 0xb8, new Instruction("eora ${0:x4}", 0xb8, 3) },
        { 0xb9, new Instruction("adca ${0:x4}", 0xb9, 3) },
        { 0xba, new Instruction("oraa ${0:x4}", 0xba, 3) },
        { 0xbb, new Instruction("adda ${0:x4}", 0xbb, 3) },
        { 0xbc, new Instruction("cpxa ${0:x4}", 0xbc, 3) },
        { 0xbd, new Instruction("jsr ${0:x4}", 0xbd, 3) },
        { 0xbe, new Instruction("lds ${0:x4}", 0xbe, 3) },
        { 0xbf, new Instruction("sts ${0:x4}", 0xbf, 3) },
        { 0xc0, new Instruction("subb #${0:x2}", 0xc0, 2) },
        { 0xc1, new Instruction("cmpb #${0:x2}", 0xc1, 2) },
        { 0xc2, new Instruction("sbcb #${0:x2}", 0xc2, 2) },
        { 0xc4, new Instruction("andb #${0:x2}", 0xc4, 2) },
        { 0xc5, new Instruction("bitb #${0:x2}", 0xc5, 2) },
        { 0xc6, new Instruction("ldab #${0:x2}", 0xc6, 2) },
        { 0xc7, new Instruction("staa #${0:x2}", 0xc7, 2) },
        { 0xc8, new Instruction("eorb #${0:x2}", 0xc8, 2) },
        { 0xc9, new Instruction("adcb #${0:x2}", 0xc9, 2) },
        { 0xca, new Instruction("orab #${0:x2}", 0xca, 2) },
        { 0xcb, new Instruction("addb #${0:x2}", 0xcb, 2) },
        { 0xce, new Instruction("ldx #${0:x4}", 0xce, 3) },
        { 0xd0, new Instruction("subb ${0:x2}", 0xd0, 2) },
        { 0xd1, new Instruction("cmpb ${0:x2}", 0xd1, 2) },
        { 0xd2, new Instruction("sbcb ${0:x2}", 0xd2, 2) },
        { 0xd4, new Instruction("andb ${0:x2}", 0xd4, 2) },
        { 0xd5, new Instruction("bitb ${0:x2}", 0xd5, 2) },
        { 0xd6, new Instruction("ldab ${0:x2}", 0xd6, 2) },
        { 0xd7, new Instruction("stab ${0:x2}", 0xd7, 2) },
        { 0xd8, new Instruction("eorb ${0:x2}", 0xd8, 2) },
        { 0xd9, new Instruction("adcb ${0:x2}", 0xd9, 2) },
        { 0xda, new Instruction("orab ${0:x2}", 0xda, 2) },
        { 0xdb, new Instruction("addb ${0:x2}", 0xdb, 2) },
        { 0xde, new Instruction("ldx ${0:x2}", 0xde, 2) },
        { 0xdf, new Instruction("stx ${0:x2}", 0xdf, 2) },
        { 0xe0, new Instruction("subb ${0:x2},x", 0xe0, 2) },
        { 0xe1, new Instruction("cmpb ${0:x2},x", 0xe1, 2) },
        { 0xe2, new Instruction("sbcb ${0:x2},x", 0xe2, 2) },
        { 0xe4, new Instruction("andb ${0:x2},x", 0xe4, 2) },
        { 0xe5, new Instruction("bitb ${0:x2},x", 0xe5, 2) },
        { 0xe6, new Instruction("ldab ${0:x2},x", 0xe6, 2) },
        { 0xe7, new Instruction("stab ${0:x2},x", 0xe7, 2) },
        { 0xe8, new Instruction("eorb ${0:x2},x", 0xe8, 2) },
        { 0xe9, new Instruction("adcb ${0:x2},x", 0xe9, 2) },
        { 0xea, new Instruction("orab ${0:x2},x", 0xea, 2) },
        { 0xeb, new Instruction("addb ${0:x2},x", 0xeb, 2) },
        { 0xee, new Instruction("ldx ${0:x2},x", 0xee, 2) },
        { 0xef, new Instruction("stx ${0:x2},x", 0xef, 2) },
        { 0xf0, new Instruction("subb ${0:x4}", 0xf0, 3) },
        { 0xf1, new Instruction("cmpb ${0:x4}", 0xf1, 3) },
        { 0xf2, new Instruction("sbcb ${0:x4}", 0xf2, 3) },
        { 0xf4, new Instruction("andb ${0:x4}", 0xf4, 3) },
        { 0xf5, new Instruction("bitb ${0:x4}", 0xf5, 3) },
        { 0xf6, new Instruction("ldab ${0:x4}", 0xf6, 3) },
        { 0xf7, new Instruction("stab ${0:x4}", 0xf7, 3) },
        { 0xf8, new Instruction("eorb ${0:x4}", 0xf8, 3) },
        { 0xf9, new Instruction("adcb ${0:x4}", 0xf9, 3) },
        { 0xfa, new Instruction("orab ${0:x4}", 0xfa, 3) },
        { 0xfb, new Instruction("addb ${0:x4}", 0xfb, 3) },
        { 0xfe, new Instruction("ldx ${0:x4}", 0xfe, 3) },
        { 0xff, new Instruction("stx ${0:x4}", 0xff, 3) },
    };

    // s_m6809

    private static readonly Dictionary<int, Instruction> s_m6809Absolute = new()
    {
        { SyntaxParser.CMPD, new Instruction("cmpd ${0:x4}", 0x10b3, 4) },
        { SyntaxParser.CMPY, new Instruction("cmpy ${0:x4}", 0x10bc, 4) },
        { SyntaxParser.LDY, new Instruction("ldy ${0:x4}", 0x10be, 4) },
        { SyntaxParser.STY, new Instruction("sty ${0:x4}", 0x10bf, 4) },
        { SyntaxParser.LDS, new Instruction("lds ${0:x4}", 0x10fe, 4) },
        { SyntaxParser.STS, new Instruction("sts ${0:x4}", 0x10ff, 4) },
        { SyntaxParser.CMPU, new Instruction("cmpu ${0:x4}", 0x11b3, 4) },
        { SyntaxParser.CMPS, new Instruction("cmps ${0:x4}", 0x11bc, 4) },
        { SyntaxParser.NEG, new Instruction("neg ${0:x4}", 0x70, 3) },
        { SyntaxParser.COM, new Instruction("com ${0:x4}", 0x73, 3) },
        { SyntaxParser.LSR, new Instruction("lsr ${0:x4}", 0x74, 3) },
        { SyntaxParser.ROR, new Instruction("ror ${0:x4}", 0x76, 3) },
        { SyntaxParser.ASR, new Instruction("asr ${0:x4}", 0x77, 3) },
        { SyntaxParser.ASL, new Instruction("asl ${0:x4}", 0x78, 3) },
        { SyntaxParser.LSL, new Instruction("lsl ${0:x4}", 0x78, 3) },
        { SyntaxParser.ROL, new Instruction("rol ${0:x4}", 0x79, 3) },
        { SyntaxParser.DEC, new Instruction("dec ${0:x4}", 0x7a, 3) },
        { SyntaxParser.INC, new Instruction("inc ${0:x4}", 0x7c, 3) },
        { SyntaxParser.TST, new Instruction("tst ${0:x4}", 0x7d, 3) },
        { SyntaxParser.JMP, new Instruction("jmp ${0:x4}", 0x7e, 3) },
        { SyntaxParser.CLR, new Instruction("clr ${0:x4}", 0x7f, 3) },
        { SyntaxParser.SUBA, new Instruction("suba ${0:x4}", 0xb0, 3) },
        { SyntaxParser.CMPA, new Instruction("cmpa ${0:x4}", 0xb1, 3) },
        { SyntaxParser.SBCA, new Instruction("sbca ${0:x4}", 0xb2, 3) },
        { SyntaxParser.SUBD, new Instruction("subd ${0:x4}", 0xb3, 3) },
        { SyntaxParser.ANDA, new Instruction("anda ${0:x4}", 0xb4, 3) },
        { SyntaxParser.BITA, new Instruction("bita ${0:x4}", 0xb5, 3) },
        { SyntaxParser.LDA, new Instruction("lda ${0:x4}", 0xb6, 3) },
        { SyntaxParser.STA, new Instruction("sta ${0:x4}", 0xb7, 3) },
        { SyntaxParser.EORA, new Instruction("eora ${0:x4}", 0xb8, 3) },
        { SyntaxParser.ADCA, new Instruction("adca ${0:x4}", 0xb9, 3) },
        { SyntaxParser.ORA, new Instruction("ora ${0:x4}", 0xba, 3) },
        { SyntaxParser.ADDA, new Instruction("adda ${0:x4}", 0xbb, 3) },
        { SyntaxParser.CMPX, new Instruction("cmpx ${0:x4}", 0xbc, 3) },
        { SyntaxParser.JSR, new Instruction("jsr ${0:x4}", 0xbd, 3) },
        { SyntaxParser.LDX, new Instruction("ldx ${0:x4}", 0xbe, 3) },
        { SyntaxParser.STX, new Instruction("stx ${0:x4}", 0xbf, 3) },
        { SyntaxParser.SUBB, new Instruction("subb ${0:x4}", 0xf0, 3) },
        { SyntaxParser.CMPB, new Instruction("cmpb ${0:x4}", 0xf1, 3) },
        { SyntaxParser.SBCB, new Instruction("sbcb ${0:x4}", 0xf2, 3) },
        { SyntaxParser.ADDD, new Instruction("addd ${0:x4}", 0xf2, 3) },
        { SyntaxParser.ANDB, new Instruction("andb ${0:x4}", 0xf4, 3) },
        { SyntaxParser.BITB, new Instruction("bitb ${0:x4}", 0xf5, 3) },
        { SyntaxParser.LDB, new Instruction("ldb ${0:x4}", 0xf6, 3) },
        { SyntaxParser.STB, new Instruction("stb ${0:x4}", 0xf7, 3) },
        { SyntaxParser.EORB, new Instruction("eorb ${0:x4}", 0xf8, 3) },
        { SyntaxParser.ADCB, new Instruction("adcb ${0:x4}", 0xf9, 3) },
        { SyntaxParser.ORB, new Instruction("orb ${0:x4}", 0xfa, 3) },
        { SyntaxParser.ADDB, new Instruction("addb ${0:x4}", 0xfb, 3) },
        { SyntaxParser.LDD, new Instruction("ldd ${0:x4}", 0xfc, 3) },
        { SyntaxParser.STD, new Instruction("std ${0:x4}", 0xfd, 3) },
        { SyntaxParser.LDU, new Instruction("ldu ${0:x4}", 0xfe, 3) },
        { SyntaxParser.STU, new Instruction("stu ${0:x4}", 0xff, 3) },
        /* relatives */
        { SyntaxParser.BRA, new Instruction("bra ${0:x4}", 0x20, 2, true) },
        { SyntaxParser.BRN, new Instruction("brn ${0:x4}", 0x21, 2, true) },
        { SyntaxParser.BHI, new Instruction("bhi ${0:x4}", 0x22, 2, true) },
        { SyntaxParser.BLS, new Instruction("bls ${0:x4}", 0x23, 2, true) },
        { SyntaxParser.BCC, new Instruction("bcc ${0:x4}", 0x24, 2, true) },
        { SyntaxParser.BHS, new Instruction("bhs ${0:x4}", 0x24, 2, true) },
        { SyntaxParser.BCS, new Instruction("bcs ${0:x4}", 0x25, 2, true) },
        { SyntaxParser.BLO, new Instruction("blo ${0:x4}", 0x25, 2, true) },
        { SyntaxParser.BNE, new Instruction("bne ${0:x4}", 0x26, 2, true) },
        { SyntaxParser.BEQ, new Instruction("beq ${0:x4}", 0x27, 2, true) },
        { SyntaxParser.BVC, new Instruction("bvc ${0:x4}", 0x28, 2, true) },
        { SyntaxParser.BVS, new Instruction("bvs ${0:x4}", 0x29, 2, true) },
        { SyntaxParser.BPL, new Instruction("bpl ${0:x4}", 0x2a, 2, true) },
        { SyntaxParser.BMI, new Instruction("bmi ${0:x4}", 0x2b, 2, true) },
        { SyntaxParser.BGE, new Instruction("bge ${0:x4}", 0x2c, 2, true) },
        { SyntaxParser.BLT, new Instruction("blt ${0:x4}", 0x2d, 2, true) },
        { SyntaxParser.BGT, new Instruction("bgt ${0:x4}", 0x2e, 2, true) },
        { SyntaxParser.BLE, new Instruction("ble ${0:x4}", 0x2f, 2, true) },
        { SyntaxParser.BSR, new Instruction("bsr ${0:x4}", 0x8d, 2, true) },
        /* relative absolutes */
        { SyntaxParser.LBRN, new Instruction("lbrn ${0:x4}", 0x1021, 4, true, true) },
        { SyntaxParser.LBHI, new Instruction("lbhi ${0:x4}", 0x1022, 4, true, true) },
        { SyntaxParser.LBLS, new Instruction("lbls ${0:x4}", 0x1023, 4, true, true) },
        { SyntaxParser.LBCC, new Instruction("lbcc ${0:x4}", 0x1024, 4, true, true) },
        { SyntaxParser.LBHS, new Instruction("lbhs ${0:x4}", 0x1024, 4, true, true) },
        { SyntaxParser.LBCS, new Instruction("lbcs ${0:x4}", 0x1025, 4, true, true) },
        { SyntaxParser.LBLO, new Instruction("lblo ${0:x4}", 0x1025, 4, true, true) },
        { SyntaxParser.LBNE, new Instruction("lbne ${0:x4}", 0x1026, 4, true, true) },
        { SyntaxParser.LBEQ, new Instruction("lbeq ${0:x4}", 0x1027, 4, true, true) },
        { SyntaxParser.LBVC, new Instruction("lbvc ${0:x4}", 0x1028, 4, true, true) },
        { SyntaxParser.LBVS, new Instruction("lbvs ${0:x4}", 0x1029, 4, true, true) },
        { SyntaxParser.LBPL, new Instruction("lbpl ${0:x4}", 0x102a, 4, true, true) },
        { SyntaxParser.LBMI, new Instruction("lbmi ${0:x4}", 0x102b, 4, true, true) },
        { SyntaxParser.LBGE, new Instruction("lbge ${0:x4}", 0x102c, 4, true, true) },
        { SyntaxParser.LBLT, new Instruction("lblt ${0:x4}", 0x102d, 4, true, true) },
        { SyntaxParser.LBGT, new Instruction("lbgt ${0:x4}", 0x102e, 4, true, true) },
        { SyntaxParser.LBLE, new Instruction("lble ${0:x4}", 0x102f, 4, true, true) },
        { SyntaxParser.LBRA, new Instruction("lbra ${0:x4}", 0x16, 3, true, true) },
        { SyntaxParser.LBSR, new Instruction("lbsr ${0:x4}", 0x17, 3, true, true) }
    };

    private static readonly Dictionary<int, Instruction> s_m6809ImmAbs = new()
    {
        { SyntaxParser.CMPD, new Instruction("cmpd #${0:x4}", 0x1083, 4) },
        { SyntaxParser.CMPY, new Instruction("cmpy #${0:x4}", 0x108c, 4) },
        { SyntaxParser.LDY, new Instruction("ldy #${0:x4}", 0x108e, 4) },
        { SyntaxParser.LDS, new Instruction("lds #${0:x4}", 0x10ce, 4) },
        { SyntaxParser.CMPU, new Instruction("cmpu #${0:x4}", 0x1183, 4) },
        { SyntaxParser.CMPS, new Instruction("cmps #${0:x4}", 0x118c, 4) },
        { SyntaxParser.SUBD, new Instruction("subd #${0:x4}", 0x83, 3) },
        { SyntaxParser.CMPX, new Instruction("cmpx #${0:x4}", 0x8c, 3) },
        { SyntaxParser.LDX, new Instruction("ldx #${0:x4}", 0x8e, 3) },
        { SyntaxParser.ADDD, new Instruction("addd #${0:x4}", 0xc3, 3) },
        { SyntaxParser.LDD, new Instruction("ldd #${0:x4}", 0xcc, 3) },
        { SyntaxParser.LDU, new Instruction("ldu #${0:x4}", 0xce, 3) },
    };

    private static readonly Dictionary<int, Instruction> s_m6809Immediate = new()
    {
        { SyntaxParser.ORCC, new Instruction("orcc #${0:x2}", 0x1a, 2) },
        { SyntaxParser.ANDCC, new Instruction("andcc #${0:x2}", 0x1c, 2) },
        { SyntaxParser.CWAI, new Instruction("cwai #${0:x2}", 0x3c, 2) },
        { SyntaxParser.SUBA, new Instruction("suba #${0:x2}", 0x80, 2) },
        { SyntaxParser.CMPA, new Instruction("cmpa #${0:x2}", 0x81, 2) },
        { SyntaxParser.SBCA, new Instruction("sbca #${0:x2}", 0x82, 2) },
        { SyntaxParser.ANDA, new Instruction("anda #${0:x2}", 0x84, 2) },
        { SyntaxParser.BITA, new Instruction("bita #${0:x2}", 0x85, 2) },
        { SyntaxParser.LDA, new Instruction("lda #${0:x2}", 0x86, 2) },
        { SyntaxParser.EORA, new Instruction("eora #${0:x2}", 0x88, 2) },
        { SyntaxParser.ADCA, new Instruction("adca #${0:x2}", 0x89, 2) },
        { SyntaxParser.ORA, new Instruction("ora #${0:x2}", 0x8a, 2) },
        { SyntaxParser.ADDA, new Instruction("adda #${0:x2}", 0x8b, 2) },
        { SyntaxParser.SUBB, new Instruction("subb #${0:x2}", 0xc0, 2) },
        { SyntaxParser.CMPB, new Instruction("cmpb #${0:x2}", 0xc1, 2) },
        { SyntaxParser.SBCB, new Instruction("sbcb #${0:x2}", 0xc2, 2) },
        { SyntaxParser.ANDB, new Instruction("andb #${0:x2}", 0xc4, 2) },
        { SyntaxParser.BITB, new Instruction("bitb #${0:x2}", 0xc5, 2) },
        { SyntaxParser.LDB, new Instruction("ldb #${0:x2}", 0xc6, 2) },
        { SyntaxParser.EORB, new Instruction("eorb #${0:x2}", 0xc8, 2) },
        { SyntaxParser.ADCB, new Instruction("adcb #${0:x2}", 0xc9, 2) },
        { SyntaxParser.ORB, new Instruction("orb #${0:x2}", 0xca, 2) },
        { SyntaxParser.ADDB, new Instruction("addb #${0:x2}", 0xcb, 2) },
    };

    private static readonly Dictionary<int, Instruction> s_m6809Implied = new()
    {
        { SyntaxParser.SWI2, new Instruction("swi2", 0x103f, 2) },
        { SyntaxParser.SWI3, new Instruction("swi3", 0x113f, 2) },
        { SyntaxParser.NOP, new Instruction("nop", 0x12) },
        { SyntaxParser.SYNC, new Instruction("sync", 0x13) },
        { SyntaxParser.DAA, new Instruction("daa", 0x19) },
        { SyntaxParser.SEX, new Instruction("sex", 0x1d) },
        { SyntaxParser.RTS, new Instruction("rts", 0x39) },
        { SyntaxParser.ABX, new Instruction("abx", 0x3a) },
        { SyntaxParser.RTI, new Instruction("rti", 0x3b) },
        { SyntaxParser.MUL, new Instruction("mul", 0x3d) },
        { SyntaxParser.SWI, new Instruction("swi", 0x3f) },
        { SyntaxParser.NEGA, new Instruction("nega", 0x40) },
        { SyntaxParser.COMA, new Instruction("coma", 0x43) },
        { SyntaxParser.LSRA, new Instruction("lsra", 0x44) },
        { SyntaxParser.RORA, new Instruction("rora", 0x46) },
        { SyntaxParser.ASRA, new Instruction("asra", 0x47) },
        { SyntaxParser.ASLA, new Instruction("asla", 0x48) },
        { SyntaxParser.LSLA, new Instruction("lsla", 0x48) },
        { SyntaxParser.ROLA, new Instruction("rola", 0x49) },
        { SyntaxParser.DECA, new Instruction("deca", 0x4a) },
        { SyntaxParser.INCA, new Instruction("inca", 0x4c) },
        { SyntaxParser.TSTA, new Instruction("tsta", 0x4d) },
        { SyntaxParser.CLRA, new Instruction("clra", 0x4f) },
        { SyntaxParser.NEGB, new Instruction("negb", 0x50) },
        { SyntaxParser.COMB, new Instruction("comb", 0x53) },
        { SyntaxParser.LSRB, new Instruction("lsrb", 0x54) },
        { SyntaxParser.RORB, new Instruction("rorb", 0x56) },
        { SyntaxParser.ASRB, new Instruction("asrb", 0x57) },
        { SyntaxParser.ASLB, new Instruction("aslb", 0x58) },
        { SyntaxParser.LSLB, new Instruction("lslb", 0x58) },
        { SyntaxParser.ROLB, new Instruction("rolb", 0x59) },
        { SyntaxParser.DECB, new Instruction("decb", 0x5a) },
        { SyntaxParser.INCB, new Instruction("incb", 0x5c) },
        { SyntaxParser.TSTB, new Instruction("tstb", 0x5d) },
        { SyntaxParser.CLRB, new Instruction("clrb", 0x5f) },
    };

    private static readonly Dictionary<int, Instruction> s_m6809IndexedX = new()
    {   
        { SyntaxParser.CMPD, new Instruction("cmpd", 0x10a3, 3) },
        { SyntaxParser.CMPY, new Instruction("cmpy", 0x10ac, 3) },
        { SyntaxParser.LDY, new Instruction("ldy", 0x10ae, 3) },
        { SyntaxParser.STY, new Instruction("sty", 0x10af, 3) },
        { SyntaxParser.LDS, new Instruction("lds", 0x10ee, 3) },
        { SyntaxParser.STS, new Instruction("sts", 0x10ef, 3) },
        { SyntaxParser.CMPU, new Instruction("cmpu", 0x11a3, 3) },
        { SyntaxParser.CMPS, new Instruction("cmps", 0x11ac, 3) },
        { SyntaxParser.LEAX, new Instruction("leax", 0x30, 2) },
        { SyntaxParser.LEAY, new Instruction("leay", 0x31, 2) },
        { SyntaxParser.LEAS, new Instruction("leas", 0x32, 2) },
        { SyntaxParser.LEAU, new Instruction("leau", 0x33, 2) },
        { SyntaxParser.NEG, new Instruction("neg", 0x60, 2) },
        { SyntaxParser.COM, new Instruction("com", 0x63, 2) },
        { SyntaxParser.LSR, new Instruction("lsr", 0x64, 2) },
        { SyntaxParser.ROR, new Instruction("ror", 0x66, 2) },
        { SyntaxParser.ASR, new Instruction("asr", 0x67, 2) },
        { SyntaxParser.ASL, new Instruction("asl", 0x68, 2) },
        { SyntaxParser.LSL, new Instruction("lsl", 0x68, 2) },
        { SyntaxParser.ROL, new Instruction("rol", 0x69, 2) },
        { SyntaxParser.DEC, new Instruction("dec", 0x6a, 2) },
        { SyntaxParser.INC, new Instruction("inc", 0x6c, 2) },
        { SyntaxParser.TST, new Instruction("tst", 0x6d, 2) },
        { SyntaxParser.JMP, new Instruction("jmp", 0x6e, 2) },
        { SyntaxParser.CLR, new Instruction("clr", 0x6f, 2) },
        { SyntaxParser.SUBA, new Instruction("suba", 0xa0, 2) },
        { SyntaxParser.CMPA, new Instruction("cmpa", 0xa1, 2) },
        { SyntaxParser.SBCA, new Instruction("sbca", 0xa2, 2) },
        { SyntaxParser.SUBD, new Instruction("subd", 0xa3, 2) },
        { SyntaxParser.ANDA, new Instruction("anda", 0xa4, 2) },
        { SyntaxParser.BITA, new Instruction("bita", 0xa5, 2) },
        { SyntaxParser.LDA, new Instruction("lda", 0xa6, 2) },
        { SyntaxParser.STA, new Instruction("sta", 0xa7, 2) },
        { SyntaxParser.EORA, new Instruction("eora", 0xa8, 2) },
        { SyntaxParser.ADCA, new Instruction("adca", 0xa9, 2) },
        { SyntaxParser.ORA, new Instruction("ora", 0xaa, 2) },
        { SyntaxParser.ADDA, new Instruction("adda", 0xab, 2) },
        { SyntaxParser.CMPX, new Instruction("cmpx", 0xac, 2) },
        { SyntaxParser.JSR, new Instruction("jsr", 0xad, 2) },
        { SyntaxParser.LDX, new Instruction("ldx", 0xae, 2) },
        { SyntaxParser.STX, new Instruction("stx", 0xaf, 2) },
        { SyntaxParser.SUBB, new Instruction("subb", 0xe0, 2) },
        { SyntaxParser.CMPB, new Instruction("cmpb", 0xe1, 2) },
        { SyntaxParser.SBCB, new Instruction("sbcb", 0xe2, 2) },
        { SyntaxParser.ADDD, new Instruction("addd", 0xe3, 2) },
        { SyntaxParser.ANDB, new Instruction("andb", 0xe4, 2) },
        { SyntaxParser.BITB, new Instruction("bitb", 0xe5, 2) },
        { SyntaxParser.LDB, new Instruction("ldb", 0xe6, 2) },
        { SyntaxParser.STB, new Instruction("stb", 0xe7, 2) },
        { SyntaxParser.EORB, new Instruction("eorb", 0xe8, 2) },
        { SyntaxParser.ADCB, new Instruction("adcb", 0xe9, 2) },
        { SyntaxParser.ORB, new Instruction("orb", 0xea, 2) },
        { SyntaxParser.ADDB, new Instruction("addb", 0xeb, 2) },
        { SyntaxParser.LDD, new Instruction("ldd", 0xec, 2) },
        { SyntaxParser.STD, new Instruction("std", 0xed, 2) },
        { SyntaxParser.LDU, new Instruction("ldu", 0xee, 2) },
        { SyntaxParser.STU, new Instruction("stu", 0xef, 2) },
    };

    private static readonly Dictionary<int, Instruction> s_m6809ZeroPage = new()
    {
        { SyntaxParser.NEG, new Instruction("neg ${0:x2}", 0x00, 2) },
        { SyntaxParser.COM, new Instruction("com ${0:x2}", 0x03, 2) },
        { SyntaxParser.LSR, new Instruction("lsr ${0:x2}", 0x04, 2) },
        { SyntaxParser.ROR, new Instruction("ror ${0:x2}", 0x06, 2) },
        { SyntaxParser.ASR, new Instruction("asr ${0:x2}", 0x07, 2) },
        { SyntaxParser.ASL, new Instruction("asl ${0:x2}", 0x08, 2) },
        { SyntaxParser.LSL, new Instruction("lsl ${0:x2}", 0x08, 2) },
        { SyntaxParser.ROL, new Instruction("rol ${0:x2}", 0x09, 2) },
        { SyntaxParser.DEC, new Instruction("dec ${0:x2}", 0x0a, 2) },
        { SyntaxParser.INC, new Instruction("inc ${0:x2}", 0x0c, 2) },
        { SyntaxParser.TST, new Instruction("tst ${0:x2}", 0x0d, 2) },
        { SyntaxParser.JMP, new Instruction("jmp ${0:x2}", 0x0e, 2) },
        { SyntaxParser.CLR, new Instruction("clr ${0:x2}", 0x0f, 2) },
        { SyntaxParser.CMPD, new Instruction("cmpd ${0:x2}", 0x1093, 3) },
        { SyntaxParser.CMPY, new Instruction("cmpy ${0:x2}", 0x109c, 3) },
        { SyntaxParser.LDY, new Instruction("ldy ${0:x2}", 0x109e, 3) },
        { SyntaxParser.STY, new Instruction("sty ${0:x2}", 0x109f, 3) },
        { SyntaxParser.LDS, new Instruction("lds ${0:x2}", 0x10de, 3) },
        { SyntaxParser.STS, new Instruction("sts ${0:x2}", 0x10df, 3) },
        { SyntaxParser.CMPU, new Instruction("cmpu ${0:x2}", 0x1193, 3) },
        { SyntaxParser.CMPS, new Instruction("cmps ${0:x2}", 0x119c, 3) },
        { SyntaxParser.EXG, new Instruction("exg", 0x1e, 2) },
        { SyntaxParser.TFR, new Instruction("tfr", 0x1f, 2) },
        { SyntaxParser.PSHS, new Instruction("pshs", 0x34, 2) },
        { SyntaxParser.PULS, new Instruction("puls", 0x35, 2) },
        { SyntaxParser.PSHU, new Instruction("pshu", 0x36, 2) },
        { SyntaxParser.PULU, new Instruction("pulu", 0x37, 2) },
        { SyntaxParser.SUBA, new Instruction("suba ${0:x2}", 0x90, 2) },
        { SyntaxParser.CMPA, new Instruction("cmpa ${0:x2}", 0x91, 2) },
        { SyntaxParser.SBCA, new Instruction("sbca ${0:x2}", 0x92, 2) },
        { SyntaxParser.SUBD, new Instruction("subd ${0:x2}", 0x93, 2) },
        { SyntaxParser.ANDA, new Instruction("anda ${0:x2}", 0x94, 2) },
        { SyntaxParser.BITA, new Instruction("bita ${0:x2}", 0x95, 2) },
        { SyntaxParser.LDA, new Instruction("lda ${0:x2}", 0x96, 2) },
        { SyntaxParser.STA, new Instruction("sta ${0:x2}", 0x97, 2) },
        { SyntaxParser.EORA, new Instruction("eora ${0:x2}", 0x98, 2) },
        { SyntaxParser.ADCA, new Instruction("adca ${0:x2}", 0x99, 2) },
        { SyntaxParser.ORA, new Instruction("ora ${0:x2}", 0x9a, 2) },
        { SyntaxParser.ADDA, new Instruction("adda ${0:x2}", 0x9b, 2) },
        { SyntaxParser.CMPX, new Instruction("cmpx ${0:x2}", 0x9c, 2) },
        { SyntaxParser.JSR, new Instruction("jsr ${0:x2}", 0x9d, 2) },
        { SyntaxParser.LDX, new Instruction("ldx ${0:x2}", 0x9e, 2) },
        { SyntaxParser.STX, new Instruction("stx ${0:x2}", 0x9f, 2) },
        { SyntaxParser.SUBB, new Instruction("subb ${0:x2}", 0xd0, 2) },
        { SyntaxParser.CMPB, new Instruction("cmpb ${0:x2}", 0xd1, 2) },
        { SyntaxParser.SBCB, new Instruction("sbcb ${0:x2}", 0xd2, 2) },
        { SyntaxParser.ADDD, new Instruction("addd ${0:x2}", 0xd3, 2) },
        { SyntaxParser.ANDB, new Instruction("andb ${0:x2}", 0xd4, 2) },
        { SyntaxParser.BITB, new Instruction("bitb ${0:x2}", 0xd5, 2) },
        { SyntaxParser.LDB, new Instruction("ldb ${0:x2}", 0xd6, 2) },
        { SyntaxParser.STB, new Instruction("stb ${0:x2}", 0xd7, 2) },
        { SyntaxParser.EORB, new Instruction("eorb ${0:x2}", 0xd8, 2) },
        { SyntaxParser.ADCB, new Instruction("adcb ${0:x2}", 0xd9, 2) },
        { SyntaxParser.ORB, new Instruction("orb ${0:x2}", 0xda, 2) },
        { SyntaxParser.ADDB, new Instruction("addb ${0:x2}", 0xdb, 2) },
        { SyntaxParser.LDD, new Instruction("ldd ${0:x2}", 0xdc, 2) },
        { SyntaxParser.STD, new Instruction("std ${0:x2}", 0xdd, 2) },
        { SyntaxParser.LDU, new Instruction("ldu ${0:x2}", 0xde, 2) },
        { SyntaxParser.STU, new Instruction("stu ${0:x2}", 0xdf, 2) },
    };

    private readonly static Dictionary<int, Instruction> s_m6809AllOpcodes = new()
    {
        { 0x00, new Instruction("neg ${0:x2}", 0x00, 2) },
        { 0x03, new Instruction("com ${0:x2}", 0x03, 2) },
        { 0x04, new Instruction("lsr ${0:x2}", 0x04, 2) },
        { 0x06, new Instruction("ror ${0:x2}", 0x06, 2) },
        { 0x07, new Instruction("asr ${0:x2}", 0x07, 2) },
        { 0x08, new Instruction("lsl ${0:x2}", 0x08, 2) },
        { 0x09, new Instruction("rol ${0:x2}", 0x09, 2) },
        { 0x0a, new Instruction("dec ${0:x2}", 0x0a, 2) },
        { 0x0c, new Instruction("inc ${0:x2}", 0x0c, 2) },
        { 0x0d, new Instruction("tst ${0:x2}", 0x0d, 2) },
        { 0x0e, new Instruction("jmp ${0:x2}", 0x0e, 2) },
        { 0x0f, new Instruction("clr ${0:x2}", 0x0f, 2) },
        { 0x1021, new Instruction("lbrn ${0:x4}", 0x1021, 4, true, true) },
        { 0x1022, new Instruction("lbhi ${0:x4}", 0x1022, 4, true, true) },
        { 0x1023, new Instruction("lbls ${0:x4}", 0x1023, 4, true, true) },
        { 0x1024, new Instruction("lbhs ${0:x4}", 0x1024, 4, true, true) },
        { 0x1025, new Instruction("lblo ${0:x4}", 0x1025, 4, true, true) },
        { 0x1026, new Instruction("lbne ${0:x4}", 0x1026, 4, true, true) },
        { 0x1027, new Instruction("lbeq ${0:x4}", 0x1027, 4, true, true) },
        { 0x1028, new Instruction("lbvc ${0:x4}", 0x1028, 4, true, true) },
        { 0x1029, new Instruction("lbvs ${0:x4}", 0x1029, 4, true, true) },
        { 0x102a, new Instruction("lbpl ${0:x4}", 0x102a, 4, true, true) },
        { 0x102b, new Instruction("lbmi ${0:x4}", 0x102b, 4, true, true) },
        { 0x102c, new Instruction("lbge ${0:x4}", 0x102c, 4, true, true) },
        { 0x102d, new Instruction("lblt ${0:x4}", 0x102d, 4, true, true) },
        { 0x102e, new Instruction("lbgt ${0:x4}", 0x102e, 4, true, true) },
        { 0x102f, new Instruction("lble ${0:x4}", 0x102f, 4, true, true) },
        { 0x103f, new Instruction("swi2", 0x103f, 2) },
        { 0x1083, new Instruction("cmpd #${0:x4}", 0x1083, 4) },
        { 0x108c, new Instruction("cmpy #${0:x4}", 0x108c, 4) },
        { 0x108e, new Instruction("ldy #${0:x4}", 0x108e, 4) },
        { 0x1093, new Instruction("cmpd ${0:x2}", 0x1093, 3) },
        { 0x109c, new Instruction("cmpy ${0:x2}", 0x109c, 3) },
        { 0x109e, new Instruction("ldy ${0:x2}", 0x109e, 3) },
        { 0x109f, new Instruction("sty ${0:x2}", 0x109f, 3) },
        { 0x10a3, new Instruction("cmpd", 0x10a3, 3) },
        { 0x10ac, new Instruction("cmpy", 0x10ac, 3) },
        { 0x10ae, new Instruction("ldy", 0x10ae, 3) },
        { 0x10af, new Instruction("sty", 0x10af, 3) },
        { 0x10b3, new Instruction("cmpd ${0:x4}", 0x10b3, 4) },
        { 0x10bc, new Instruction("cmpy ${0:x4}", 0x10bc, 4) },
        { 0x10be, new Instruction("ldy ${0:x4}", 0x10be, 4) },
        { 0x10bf, new Instruction("sty ${0:x4}", 0x10bf, 4) },
        { 0x10ce, new Instruction("lds #${0:x4}", 0x10ce, 4) },
        { 0x10de, new Instruction("lds ${0:x2}", 0x10de, 3) },
        { 0x10df, new Instruction("sts ${0:x2}", 0x10df, 3) },
        { 0x10ee, new Instruction("lds", 0x10ee, 3) },
        { 0x10ef, new Instruction("sts", 0x10ef, 3) },
        { 0x10fe, new Instruction("lds ${0:x4}", 0x10fe, 4) },
        { 0x10ff, new Instruction("sts ${0:x4}", 0x10ff, 4) },
        { 0x113f, new Instruction("swi3", 0x113f, 2) },
        { 0x1183, new Instruction("cmpu #${0:x4}", 0x1183, 4) },
        { 0x118c, new Instruction("cmps #${0:x4}", 0x118c, 4) },
        { 0x1193, new Instruction("cmpu ${0:x2}", 0x1193, 3) },
        { 0x119c, new Instruction("cmps ${0:x2}", 0x119c, 3) },
        { 0x11a3, new Instruction("cmpu", 0x11a3, 3) },
        { 0x11ac, new Instruction("cmps", 0x11ac, 3) },
        { 0x11b3, new Instruction("cmpu ${0:x4}", 0x11b3, 4) },
        { 0x11bc, new Instruction("cmps ${0:x4}", 0x11bc, 4) },
        { 0x12, new Instruction("nop", 0x12) },
        { 0x13, new Instruction("sync", 0x13) },
        { 0x16, new Instruction("lbra ${0:x4}", 0x16, 3, true, true) },
        { 0x17, new Instruction("lbsr ${0:x4}", 0x17, 3, true, true) },
        { 0x19, new Instruction("daa", 0x19) },
        { 0x1a, new Instruction("orcc #${0:x2}", 0x1a, 2) },
        { 0x1c, new Instruction("andcc #${0:x2}", 0x1c, 2) },
        { 0x1d, new Instruction("sex", 0x1d) },
        { 0x1e, new Instruction("exg", 0x1e, 2) },
        { 0x1f, new Instruction("tfr", 0x1f, 2) },
        { 0x20, new Instruction("bra ${0:x4}", 0x20, 2, true) },
        { 0x21, new Instruction("brn ${0:x4}", 0x21, 2, true) },
        { 0x22, new Instruction("bhi ${0:x4}", 0x22, 2, true) },
        { 0x23, new Instruction("bls ${0:x4}", 0x23, 2, true) },
        { 0x24, new Instruction("bhs ${0:x4}", 0x24, 2, true) },
        { 0x25, new Instruction("blo ${0:x4}", 0x25, 2, true) },
        { 0x26, new Instruction("bne ${0:x4}", 0x26, 2, true) },
        { 0x27, new Instruction("beq ${0:x4}", 0x27, 2, true) },
        { 0x28, new Instruction("bvc ${0:x4}", 0x28, 2, true) },
        { 0x29, new Instruction("bvs ${0:x4}", 0x29, 2, true) },
        { 0x2a, new Instruction("bpl ${0:x4}", 0x2a, 2, true) },
        { 0x2b, new Instruction("bmi ${0:x4}", 0x2b, 2, true) },
        { 0x2c, new Instruction("bge ${0:x4}", 0x2c, 2, true) },
        { 0x2d, new Instruction("blt ${0:x4}", 0x2d, 2, true) },
        { 0x2e, new Instruction("bgt ${0:x4}", 0x2e, 2, true) },
        { 0x2f, new Instruction("ble ${0:x4}", 0x2f, 2, true) },
        { 0x30, new Instruction("leax", 0x30, 2) },
        { 0x31, new Instruction("leay", 0x31, 2) },
        { 0x32, new Instruction("leas", 0x32, 2) },
        { 0x33, new Instruction("leau", 0x33, 2) },
        { 0x34, new Instruction("pshs", 0x34, 2) },
        { 0x35, new Instruction("puls", 0x35, 2) },
        { 0x36, new Instruction("pshu", 0x36, 2) },
        { 0x37, new Instruction("pulu", 0x37, 2) },
        { 0x39, new Instruction("rts", 0x39) },
        { 0x3a, new Instruction("abx", 0x3a) },
        { 0x3b, new Instruction("rti", 0x3b) },
        { 0x3c, new Instruction("cwai #${0:x2}", 0x3c, 2) },
        { 0x3d, new Instruction("mul", 0x3d) },
        { 0x3f, new Instruction("swi", 0x3f) },
        { 0x40, new Instruction("nega", 0x40) },
        { 0x43, new Instruction("coma", 0x43) },
        { 0x44, new Instruction("lsra", 0x44) },
        { 0x46, new Instruction("rora", 0x46) },
        { 0x47, new Instruction("asra", 0x47) },
        { 0x48, new Instruction("lsla", 0x48) },
        { 0x49, new Instruction("rola", 0x49) },
        { 0x4a, new Instruction("deca", 0x4a) },
        { 0x4c, new Instruction("inca", 0x4c) },
        { 0x4d, new Instruction("tsta", 0x4d) },
        { 0x4f, new Instruction("clra", 0x4f) },
        { 0x50, new Instruction("negb", 0x50) },
        { 0x53, new Instruction("comb", 0x53) },
        { 0x54, new Instruction("lsrb", 0x54) },
        { 0x56, new Instruction("rorb", 0x56) },
        { 0x57, new Instruction("asrb", 0x57) },
        { 0x58, new Instruction("aslb", 0x58) },
        { 0x59, new Instruction("rolb", 0x59) },
        { 0x5a, new Instruction("decb", 0x5a) },
        { 0x5c, new Instruction("incb", 0x5c) },
        { 0x5d, new Instruction("tstb", 0x5d) },
        { 0x5f, new Instruction("clrb", 0x5f) },
        { 0x60, new Instruction("neg", 0x60, 2) },
        { 0x63, new Instruction("com", 0x63, 2) },
        { 0x64, new Instruction("lsr", 0x64, 2) },
        { 0x66, new Instruction("ror", 0x66, 2) },
        { 0x67, new Instruction("asr", 0x67, 2) },
        { 0x68, new Instruction("lsl", 0x68, 2) },
        { 0x69, new Instruction("rol", 0x69, 2) },
        { 0x6a, new Instruction("dec", 0x6a, 2) },
        { 0x6c, new Instruction("inc", 0x6c, 2) },
        { 0x6d, new Instruction("tst", 0x6d, 2) },
        { 0x6e, new Instruction("jmp", 0x6e, 2) },
        { 0x6f, new Instruction("clr", 0x6f, 2) },
        { 0x70, new Instruction("neg ${0:x4}", 0x70, 3) },
        { 0x73, new Instruction("com ${0:x4}", 0x73, 3) },
        { 0x74, new Instruction("lsr ${0:x4}", 0x74, 3) },
        { 0x76, new Instruction("ror ${0:x4}", 0x76, 3) },
        { 0x77, new Instruction("asr ${0:x4}", 0x77, 3) },
        { 0x78, new Instruction("lsl ${0:x4}", 0x78, 3) },
        { 0x79, new Instruction("rol ${0:x4}", 0x79, 3) },
        { 0x7a, new Instruction("dec ${0:x4}", 0x7a, 3) },
        { 0x7c, new Instruction("inc ${0:x4}", 0x7c, 3) },
        { 0x7d, new Instruction("tst ${0:x4}", 0x7d, 3) },
        { 0x7e, new Instruction("jmp ${0:x4}", 0x7e, 3) },
        { 0x7f, new Instruction("clr ${0:x4}", 0x7f, 3) },
        { 0x80, new Instruction("suba #${0:x2}", 0x80, 2) },
        { 0x81, new Instruction("cmpa #${0:x2}", 0x81, 2) },
        { 0x82, new Instruction("sbca #${0:x2}", 0x82, 2) },
        { 0x83, new Instruction("subd #${0:x4}", 0x83, 3) },
        { 0x84, new Instruction("anda #${0:x2}", 0x84, 2) },
        { 0x85, new Instruction("bita #${0:x2}", 0x85, 2) },
        { 0x86, new Instruction("lda #${0:x2}", 0x86, 2) },
        { 0x88, new Instruction("eora #${0:x2}", 0x88, 2) },
        { 0x89, new Instruction("adca #${0:x2}", 0x89, 2) },
        { 0x8a, new Instruction("ora #${0:x2}", 0x8a, 2) },
        { 0x8b, new Instruction("adda #${0:x2}", 0x8b, 2) },
        { 0x8c, new Instruction("cmpx #${0:x4}", 0x8c, 3) },
        { 0x8d, new Instruction("bsr ${0:x4}", 0x8d, 2, true) },
        { 0x8e, new Instruction("ldx #${0:x4}", 0x8e, 3) },
        { 0x90, new Instruction("suba ${0:x2}", 0x90, 2) },
        { 0x91, new Instruction("cmpa ${0:x2}", 0x91, 2) },
        { 0x92, new Instruction("sbca ${0:x2}", 0x92, 2) },
        { 0x93, new Instruction("subd ${0:x2}", 0x93, 2) },
        { 0x94, new Instruction("anda ${0:x2}", 0x94, 2) },
        { 0x95, new Instruction("bita ${0:x2}", 0x95, 2) },
        { 0x96, new Instruction("lda ${0:x2}", 0x96, 2) },
        { 0x97, new Instruction("sta ${0:x2}", 0x97, 2) },
        { 0x98, new Instruction("eora ${0:x2}", 0x98, 2) },
        { 0x99, new Instruction("adca ${0:x2}", 0x99, 2) },
        { 0x9a, new Instruction("ora ${0:x2}", 0x9a, 2) },
        { 0x9b, new Instruction("adda ${0:x2}", 0x9b, 2) },
        { 0x9c, new Instruction("cmpx ${0:x2}", 0x9c, 2) },
        { 0x9d, new Instruction("jsr ${0:x2}", 0x9d, 2) },
        { 0x9e, new Instruction("ldx ${0:x2}", 0x9e, 2) },
        { 0x9f, new Instruction("stx ${0:x2}", 0x9f, 2) },
        { 0xa0, new Instruction("suba", 0xa0, 2) },
        { 0xa1, new Instruction("cmpa", 0xa1, 2) },
        { 0xa2, new Instruction("sbca", 0xa2, 2) },
        { 0xa3, new Instruction("subd", 0xa3, 2) },
        { 0xa4, new Instruction("anda", 0xa4, 2) },
        { 0xa5, new Instruction("bita", 0xa5, 2) },
        { 0xa6, new Instruction("lda", 0xa6, 2) },
        { 0xa7, new Instruction("sta", 0xa7, 2) },
        { 0xa8, new Instruction("eora", 0xa8, 2) },
        { 0xa9, new Instruction("adca", 0xa9, 2) },
        { 0xaa, new Instruction("ora", 0xaa, 2) },
        { 0xab, new Instruction("adda", 0xab, 2) },
        { 0xac, new Instruction("cmpx", 0xac, 2) },
        { 0xad, new Instruction("jsr", 0xad, 2) },
        { 0xae, new Instruction("ldx", 0xae, 2) },
        { 0xaf, new Instruction("stx", 0xaf, 2) },
        { 0xb0, new Instruction("suba ${0:x4}", 0xb0, 3) },
        { 0xb1, new Instruction("cmpa ${0:x4}", 0xb1, 3) },
        { 0xb2, new Instruction("sbca ${0:x4}", 0xb2, 3) },
        { 0xb3, new Instruction("subd ${0:x4}", 0xb3, 3) },
        { 0xb4, new Instruction("anda ${0:x4}", 0xb4, 3) },
        { 0xb5, new Instruction("bita ${0:x4}", 0xb5, 3) },
        { 0xb6, new Instruction("lda ${0:x4}", 0xb6, 3) },
        { 0xb7, new Instruction("sta ${0:x4}", 0xb7, 3) },
        { 0xb8, new Instruction("eora ${0:x4}", 0xb8, 3) },
        { 0xb9, new Instruction("adca ${0:x4}", 0xb9, 3) },
        { 0xba, new Instruction("ora ${0:x4}", 0xba, 3) },
        { 0xbb, new Instruction("adda ${0:x4}", 0xbb, 3) },
        { 0xbc, new Instruction("cmpx ${0:x4}", 0xbc, 3) },
        { 0xbd, new Instruction("jsr ${0:x4}", 0xbd, 3) },
        { 0xbe, new Instruction("ldx ${0:x4}", 0xbe, 3) },
        { 0xbf, new Instruction("stx ${0:x4}", 0xbf, 3) },
        { 0xc0, new Instruction("subb #${0:x2}", 0xc0, 2) },
        { 0xc1, new Instruction("cmpb #${0:x2}", 0xc1, 2) },
        { 0xc2, new Instruction("sbcb #${0:x2}", 0xc2, 2) },
        { 0xc3, new Instruction("addd #${0:x4}", 0xc3, 3) },
        { 0xc4, new Instruction("andb #${0:x2}", 0xc4, 2) },
        { 0xc5, new Instruction("bitb #${0:x2}", 0xc5, 2) },
        { 0xc6, new Instruction("ldb #${0:x2}", 0xc6, 2) },
        { 0xc8, new Instruction("eorb #${0:x2}", 0xc8, 2) },
        { 0xc9, new Instruction("adcb #${0:x2}", 0xc9, 2) },
        { 0xca, new Instruction("orb #${0:x2}", 0xca, 2) },
        { 0xcb, new Instruction("addb #${0:x2}", 0xcb, 2) },
        { 0xcc, new Instruction("ldd #${0:x4}", 0xcc, 3) },
        { 0xce, new Instruction("ldu #${0:x4}", 0xce, 3) },
        { 0xd0, new Instruction("subb ${0:x2}", 0xd0, 2) },
        { 0xd1, new Instruction("cmpb ${0:x2}", 0xd1, 2) },
        { 0xd2, new Instruction("sbcb ${0:x2}", 0xd2, 2) },
        { 0xd3, new Instruction("addd ${0:x2}", 0xd3, 2) },
        { 0xd4, new Instruction("andb ${0:x2}", 0xd4, 2) },
        { 0xd5, new Instruction("bitb ${0:x2}", 0xd5, 2) },
        { 0xd6, new Instruction("ldb ${0:x2}", 0xd6, 2) },
        { 0xd7, new Instruction("stb ${0:x2}", 0xd7, 2) },
        { 0xd8, new Instruction("eorb ${0:x2}", 0xd8, 2) },
        { 0xd9, new Instruction("adcb ${0:x2}", 0xd9, 2) },
        { 0xda, new Instruction("orb ${0:x2}", 0xda, 2) },
        { 0xdb, new Instruction("addb ${0:x2}", 0xdb, 2) },
        { 0xdc, new Instruction("ldd ${0:x2}", 0xdc, 2) },
        { 0xdd, new Instruction("std ${0:x2}", 0xdd, 2) },
        { 0xde, new Instruction("ldu ${0:x2}", 0xde, 2) },
        { 0xdf, new Instruction("stu ${0:x2}", 0xdf, 2) },
        { 0xe0, new Instruction("subb", 0xe0, 2) },
        { 0xe1, new Instruction("cmpb", 0xe1, 2) },
        { 0xe2, new Instruction("sbcb", 0xe2, 2) },
        { 0xe3, new Instruction("addd", 0xe3, 2) },
        { 0xe4, new Instruction("andb", 0xe4, 2) },
        { 0xe5, new Instruction("bitb", 0xe5, 2) },
        { 0xe6, new Instruction("ldb", 0xe6, 2) },
        { 0xe7, new Instruction("stb", 0xe7, 2) },
        { 0xe8, new Instruction("eorb", 0xe8, 2) },
        { 0xe9, new Instruction("adcb", 0xe9, 2) },
        { 0xea, new Instruction("orb", 0xea, 2) },
        { 0xeb, new Instruction("addb", 0xeb, 2) },
        { 0xec, new Instruction("ldd", 0xec, 2) },
        { 0xed, new Instruction("std", 0xed, 2) },
        { 0xee, new Instruction("ldu", 0xee, 2) },
        { 0xef, new Instruction("stu", 0xef, 2) },
        { 0xf0, new Instruction("subb ${0:x4}", 0xf0, 3) },
        { 0xf1, new Instruction("cmpb ${0:x4}", 0xf1, 3) },
        { 0xf2, new Instruction("addd ${0:x4}", 0xf2, 3) },
        { 0xf4, new Instruction("andb ${0:x4}", 0xf4, 3) },
        { 0xf5, new Instruction("bitb ${0:x4}", 0xf5, 3) },
        { 0xf6, new Instruction("ldb ${0:x4}", 0xf6, 3) },
        { 0xf7, new Instruction("stb ${0:x4}", 0xf7, 3) },
        { 0xf8, new Instruction("eorb ${0:x4}", 0xf8, 3) },
        { 0xf9, new Instruction("adcb ${0:x4}", 0xf9, 3) },
        { 0xfa, new Instruction("orb ${0:x4}", 0xfa, 3) },
        { 0xfb, new Instruction("addb ${0:x4}", 0xfb, 3) },
        { 0xfc, new Instruction("ldd ${0:x4}", 0xfc, 3) },
        { 0xfd, new Instruction("std ${0:x4}", 0xfd, 3) },
        { 0xfe, new Instruction("ldu ${0:x4}", 0xfe, 3) },
        { 0xff, new Instruction("stu ${0:x4}", 0xff, 3) },
    };

    private static readonly HashSet<int> s_m6809IndexedCodes = new()
    {
        0x30,
        0x31,
        0x32,
        0x33,
        0x60,
        0x63,
        0x64,
        0x66,
        0x67,
        0x68,
        0x68,
        0x69,
        0x6a,
        0x6c,
        0x6d,
        0x6e,
        0x6f,
        0xa0,
        0xa1,
        0xa2,
        0xa3,
        0xa4,
        0xa5,
        0xa6,
        0xa7,
        0xa8,
        0xa9,
        0xaa,
        0xab,
        0xac,
        0xad,
        0xae,
        0xaf,
        0xe0,
        0xe1,
        0xe2,
        0xe3,
        0xe4,
        0xe5,
        0xe6,
        0xe7,
        0xe8,
        0xe9,
        0xea,
        0xeb,
        0xec,
        0xed,
        0xee,
        0xef,
        0x10a3,
        0x10ac,
        0x10ae,
        0x10af,
        0x10ee,
        0x10ef,
        0x11a3,
        0x11ac,
    };

    private static readonly int[] s_regOpcodes =
    {
        0x1e, 0x1f, 0x34, 0x35, 0x36, 0x37
    };

    private static readonly Dictionary<int, int> s_exchangeModes = new()
    {
        { SyntaxParser.D,  0b0000 },
        { SyntaxParser.X,  0b0001 },
        { SyntaxParser.Y,  0b0010 },
        { SyntaxParser.U,  0b0011 },
        { SyntaxParser.S,  0b0100 },
        { SyntaxParser.PC, 0b0101 },
        { SyntaxParser.A,  0b1000 },
        { SyntaxParser.B,  0b1001 },
        { SyntaxParser.CC, 0b1010 },
        { SyntaxParser.DP, 0b1011 }
    };

    private static readonly Dictionary<int, string> s_exchangeRegsLu = new()
    {
        { 0b0000, "d" },
        { 0b0001, "x" },
        { 0b0010, "y" },
        { 0b0011, "u" },
        { 0b0100, "s" },
        { 0b0101, "pc" },
        { 0b1000, "a" },
        { 0b1001, "b" },
        { 0b1010, "cc" },
        { 0b1011, "dp" }
    };

    private static readonly Dictionary<int, int> s_pushPullModes = new()
    {
        { SyntaxParser.PC, 0b1000_0000 },
        { SyntaxParser.S,  0b0100_0000 },
        { SyntaxParser.U,  0b0100_0000 },
        { SyntaxParser.Y,  0b0010_0000 },
        { SyntaxParser.X,  0b0001_0000 },
        { SyntaxParser.DP, 0b0000_1000 },
        { SyntaxParser.D,  0b0000_0110 },
        { SyntaxParser.B,  0b0000_0100 },
        { SyntaxParser.A,  0b0000_0010 },
        { SyntaxParser.CC, 0b0000_0001 }
    };

    private static readonly Dictionary<int, string> s_pushPullRegsLu = new()
    {
        { 0b1000_0000, "pc" },
        { 0b0100_0000, "su" },
        { 0b0010_0000, "y" },
        { 0b0001_0000, "x" },
        { 0b0000_1000, "dp" },
        { 0b0000_0110, "d" },
        { 0b0000_0100, "b" },
        { 0b0000_0010, "a" },
        { 0b0000_0001, "cc" }
    };

    private static readonly Dictionary<int, int> s_accumulatorRegs = new()
    {
        { SyntaxParser.A, 0b0110 },
        { SyntaxParser.B, 0b0101 },
        { SyntaxParser.D, 0b1011 }
    };

    private static readonly Dictionary<int, int> s_indexRegs = new()
    {
        {  SyntaxParser.X, 0b0_00_00000 },
        {  SyntaxParser.Y, 0b0_01_00000 },
        {  SyntaxParser.U, 0b0_10_00000 },
        {  SyntaxParser.S, 0b0_11_00000 }
    };

    private static readonly Dictionary<int, char> s_indexRegsReverseLu = new()
    {
        { 0b0_00_00000, 'x' },
        { 0b0_01_00000, 'y' },
        { 0b0_10_00000, 'u' },
        { 0b0_11_00000, 's' }
    };

    private static readonly Dictionary<int, int> s_increments = new()
    {
        { SyntaxParser.Plus,         0b00 },
        { SyntaxParser.DoublePlus,   0b01 },
        { SyntaxParser.Hyphen,       0b10 },
        { SyntaxParser.DoubleHyphen, 0b11 }
    };

}

